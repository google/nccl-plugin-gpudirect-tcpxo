/*
 * Copyright 2025 Google LLC
 *
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE.md file or at
 * https://developers.google.com/open-source/licenses/bsd
 */

/**
 *  Header file for all CUDA-buffer-related setups.
 */
#ifndef NCCL_CUDA_CUDA_COMMON_H_
#define NCCL_CUDA_CUDA_COMMON_H_

#include <cstddef>

#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "absl/strings/string_view.h"
#include "cuda.h"
#include "driver_types.h"
#include "nccl.h"
#include "nccl_cuda/cuda_defs.h"

namespace fastrak {

absl::StatusOr<int> GetDeviceIndex();

// Initializes gpu related states.
absl::StatusOr<gpuDev> initGpuDev();

// Returns the device ID for the memory, or -1 if it is host memory
absl::StatusOr<int> getDeviceId(const void* ptr);

// Get DMA-BUF fd from memory.
absl::StatusOr<int> getDmabufFd(void* ptr, size_t size,
                                absl::string_view gpu_pci_addr = "");

absl::StatusOr<int> getDeviceCount();
absl::Status checkDeviceCount(int max_devices);

// Force conversion to absl::Status to ensure StatusBuilder logs.
inline ncclResult_t ToNccl(absl::Status) { return ncclSystemError; }

// Helper functions that support populating CUDA buffers with
// random numbers generated by curand(), using a specific seed supplied by the
// user.
// User can also check if the content of a CUDA buffer is generated with a
// specific seed or not.

// Using GpuRandomPayloadGenerator requires the user to call `cudaSetDevice`
// or `cuCtxSetCurrent` before creating any instance.

// Given a seed, populate the buffer with random numbers generated with the
// seed.
absl::Status GeneratePayload(int seed, void* ptr, uint64_t size);
// Given a seed, verify the buffer payload matches the numbers generated
// with the seed.
absl::Status ValidatePayload(int seed, void* ptr, uint64_t size);

// Helper function to convert CUDA Driver API results to absl::Status.
absl::Status cu_call_success(CUresult err);

// Helper function to convert CUDA Runtime API results to absl::Status.
absl::Status cuda_call_success(cudaError_t err);

// Helper function to convert NCCL API results to absl::Status.
absl::Status nccl_call_success(ncclResult_t err);

}  // namespace fastrak

#endif  // NCCL_CUDA_CUDA_COMMON_H_
